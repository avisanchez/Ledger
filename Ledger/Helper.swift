//
//  PlistHelper.swift
//  Ledger
//
//  Created by Avi Sanchez on 5/9/24.
//

import Foundation

/**
 Convert a plist into an Account struct.

 - parameters:
    - name: The name of the specified file. Omit the .plist extension.
 
 - throws: An error of type **DecodingError**
 
 - returns: An initalized Account struct according to the plist. **nil** if unable to parse.
 
 This function is for migration purposes and should only be called if the plist was generated by the original CheckBook application.
 
 */
func loadEntries(from filename: String, ofType type: String) throws -> [AccountEntry] {
    guard let path = Bundle.main.path(forResource: filename, ofType: nil),
          let xml = FileManager.default.contents(atPath: path) else {
        return []
    }
    
    return try PropertyListDecoder().decode(Account.self, from: xml).entries
}

func loadEntries(from url: URL) throws -> [AccountEntry] {
    guard let data = try? Data(contentsOf: url) else { return [] }
    
    return try PropertyListDecoder().decode(Account.self, from: data).entries
}

/**
 Save an Account to a formatted json file.
 
 - parameters:
    - data: The Account to be saved.
    - filename: The name of the save file.

 - throws: An error of type **EncodingError**
 
 - ToDo: Possibly modify save location. On my build it current saves to /Users/avisanchez/Library/Containers/name.avisanchez.Ledger/Data/Documents/. Program currently throws fatalError if save fails for debugging purposes.
 */
func saveToFile(_ data: Account, _ filename: String) throws -> Void {
    let encoder = JSONEncoder()
    encoder.outputFormatting = [.sortedKeys, .prettyPrinted]

    do {
        let jsonData = try encoder.encode(data)
        let fileUrl = try FileManager.default
            .url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: true)
            .appendingPathComponent("\(filename).json")
        try jsonData.write(to: fileUrl)
    } catch {
        fatalError("\(error)")
    }
}
